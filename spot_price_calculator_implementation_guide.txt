# Spot Price Calculator Implementation Guide

## Overview
This guide provides a complete implementation of a Spot Price Calculator that calculates coin prices using a "fixed dollar over spot" pricing model. The system consists of a React frontend and Node.js/Express backend with PostgreSQL database.

## System Architecture

### 1. Frontend (React + TypeScript)
```typescript
// src/components/SpotPriceCalculator.tsx
import React, { useState, useEffect } from 'react';
import {
  Box,
  Button,
  VStack,
  HStack,
  Text,
  useToast,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  FormControl,
  FormLabel,
  Input,
  Select,
  NumberInput,
  NumberInputField,
  NumberInputStepper,
  NumberIncrementStepper,
  NumberDecrementStepper,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalCloseButton,
  useDisclosure,
} from '@chakra-ui/react';
import { AddIcon, DeleteIcon } from '@chakra-ui/icons';
import { spotPriceService, SpotPriceProduct } from '../services/spotPriceService';

// Component Implementation
const SpotPriceCalculator: React.FC = () => {
  // State Management
  const [fixedDollarProducts, setFixedDollarProducts] = useState<SpotPriceProduct[]>([]);
  const [percentageProducts, setPercentageProducts] = useState<SpotPriceProduct[]>([]);
  const [newProduct, setNewProduct] = useState<Omit<SpotPriceProduct, 'id'>>({
    coinId: '',
    metal: 'Silver',
    ounces: 1,
    amount: 0,
    type: 'fixed',
  });
  const [tableType, setTableType] = useState<'fixed' | 'percentage'>('fixed');
  const { isOpen, onOpen, onClose } = useDisclosure();
  const toast = useToast();

  // Load products on component mount
  useEffect(() => {
    loadProducts();
  }, []);

  // Product Management Functions
  const loadProducts = async () => {
    try {
      const fixedProducts = await spotPriceService.getAllProducts('fixed');
      const percentageProducts = await spotPriceService.getAllProducts('percentage');
      setFixedDollarProducts(fixedProducts);
      setPercentageProducts(percentageProducts);
    } catch (error) {
      toast({
        title: 'Error loading products',
        description: 'Failed to load products from the server',
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
    }
  };

  const handleAddProduct = async () => {
    try {
      const product = await spotPriceService.createProduct({
        ...newProduct,
        type: tableType,
      });
      if (tableType === 'fixed') {
        setFixedDollarProducts([...fixedDollarProducts, product]);
      } else {
        setPercentageProducts([...percentageProducts, product]);
      }
      setNewProduct({
        coinId: '',
        metal: 'Silver',
        ounces: 1,
        amount: 0,
        type: 'fixed',
      });
      onClose();
      toast({
        title: 'Product added successfully',
        status: 'success',
        duration: 3000,
        isClosable: true,
      });
    } catch (error) {
      toast({
        title: 'Error adding product',
        description: 'Failed to add product to the server',
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
    }
  };

  const handleDeleteProduct = async (id: number, type: 'fixed' | 'percentage') => {
    try {
      await spotPriceService.deleteProduct(id);
      if (type === 'fixed') {
        setFixedDollarProducts(fixedDollarProducts.filter(p => p.id !== id));
      } else {
        setPercentageProducts(percentageProducts.filter(p => p.id !== id));
      }
      toast({
        title: 'Product deleted successfully',
        status: 'success',
        duration: 3000,
        isClosable: true,
      });
    } catch (error) {
      toast({
        title: 'Error deleting product',
        description: 'Failed to delete product from the server',
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
    }
  };

  // UI Rendering
  return (
    <Box>
      <VStack spacing={6} align="stretch">
        <Heading size="lg" color="orange.500">Spot Price Calculator</Heading>

        {/* Type Selection */}
        <HStack spacing={4}>
          <Button
            colorScheme={tableType === 'fixed' ? 'orange' : 'gray'}
            onClick={() => setTableType('fixed')}
          >
            Fixed Dollar Over Spot
          </Button>
          <Button
            colorScheme={tableType === 'percentage' ? 'orange' : 'gray'}
            onClick={() => setTableType('percentage')}
          >
            Percentage Over Spot
          </Button>
        </HStack>

        {/* Products Table */}
        <Box p={6} borderWidth={1} borderRadius="lg">
          <HStack justify="space-between" mb={4}>
            <Text fontSize="lg" fontWeight="bold">
              {tableType === 'fixed' ? 'Fixed Dollar Over Spot' : 'Percentage Over Spot'}
            </Text>
            <Button leftIcon={<AddIcon />} colorScheme="orange" onClick={onOpen}>
              Add Product
            </Button>
          </HStack>

          <Table variant="simple">
            <Thead>
              <Tr>
                <Th>Coin ID</Th>
                <Th>Metal</Th>
                <Th>Ounces</Th>
                <Th>{tableType === 'fixed' ? 'Amount ($)' : 'Amount (%)'}</Th>
                <Th>Actions</Th>
              </Tr>
            </Thead>
            <Tbody>
              {(tableType === 'fixed' ? fixedDollarProducts : percentageProducts).map((product) => (
                <Tr key={product.id}>
                  <Td>{product.coinId}</Td>
                  <Td>{product.metal}</Td>
                  <Td>{product.ounces}</Td>
                  <Td>{product.amount}</Td>
                  <Td>
                    <Button
                      leftIcon={<DeleteIcon />}
                      colorScheme="red"
                      variant="ghost"
                      size="sm"
                      onClick={() => handleDeleteProduct(product.id!, product.type)}
                    >
                      Delete
                    </Button>
                  </Td>
                </Tr>
              ))}
            </Tbody>
          </Table>
        </Box>
      </VStack>

      {/* Add Product Modal */}
      <Modal isOpen={isOpen} onClose={onClose}>
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>Add New Product</ModalHeader>
          <ModalCloseButton />
          <ModalBody>
            <VStack spacing={4}>
              <FormControl>
                <FormLabel>Coin ID</FormLabel>
                <Input
                  value={newProduct.coinId}
                  onChange={(e) => setNewProduct({ ...newProduct, coinId: e.target.value })}
                />
              </FormControl>
              <FormControl>
                <FormLabel>Metal</FormLabel>
                <Select
                  value={newProduct.metal}
                  onChange={(e) => setNewProduct({ ...newProduct, metal: e.target.value as 'Gold' | 'Silver' })}
                >
                  <option value="Gold">Gold</option>
                  <option value="Silver">Silver</option>
                </Select>
              </FormControl>
              <FormControl>
                <FormLabel>Ounces</FormLabel>
                <NumberInput
                  value={newProduct.ounces}
                  onChange={(_, value) => setNewProduct({ ...newProduct, ounces: value })}
                  min={0.1}
                  step={0.1}
                >
                  <NumberInputField />
                  <NumberInputStepper>
                    <NumberIncrementStepper />
                    <NumberDecrementStepper />
                  </NumberInputStepper>
                </NumberInput>
              </FormControl>
              <FormControl>
                <FormLabel>{tableType === 'fixed' ? 'Amount ($)' : 'Amount (%)'}</FormLabel>
                <NumberInput
                  value={newProduct.amount}
                  onChange={(_, value) => setNewProduct({ ...newProduct, amount: value })}
                  min={0}
                  step={0.01}
                  precision={2}
                >
                  <NumberInputField />
                  <NumberInputStepper>
                    <NumberIncrementStepper />
                    <NumberDecrementStepper />
                  </NumberInputStepper>
                </NumberInput>
              </FormControl>
              <Button colorScheme="orange" onClick={handleAddProduct} width="full">
                Add Product
              </Button>
            </VStack>
          </ModalBody>
        </ModalContent>
      </Modal>
    </Box>
  );
};

export default SpotPriceCalculator;
```

### 2. Frontend Service (TypeScript)
```typescript
// src/services/spotPriceService.ts
import { API_URL } from '../config';

export interface SpotPriceProduct {
  id?: number;
  coinId: string;
  metal: 'Gold' | 'Silver';
  ounces: number;
  amount: number;
  type: 'fixed' | 'percentage';
}

class SpotPriceService {
  private baseUrl: string;

  constructor() {
    this.baseUrl = `${API_URL}/api/spot-price`;
  }

  async getAllProducts(type?: 'fixed' | 'percentage'): Promise<SpotPriceProduct[]> {
    const url = type ? `${this.baseUrl}?type=${type}` : this.baseUrl;
    const response = await fetch(url, {
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
      },
    });
    if (!response.ok) {
      throw new Error('Failed to fetch products');
    }
    return response.json();
  }

  async createProduct(product: Omit<SpotPriceProduct, 'id'>): Promise<SpotPriceProduct> {
    const response = await fetch(this.baseUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
      },
      body: JSON.stringify(product),
    });
    if (!response.ok) {
      throw new Error('Failed to create product');
    }
    return response.json();
  }

  async deleteProduct(id: number): Promise<void> {
    const response = await fetch(`${this.baseUrl}/${id}`, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
      },
    });
    if (!response.ok) {
      throw new Error('Failed to delete product');
    }
  }
}

export const spotPriceService = new SpotPriceService();
```

### 3. Backend (Node.js + Express + PostgreSQL)

#### Database Schema
```sql
CREATE TABLE spot_price_products (
  id SERIAL PRIMARY KEY,
  coin_id VARCHAR(255) NOT NULL,
  metal VARCHAR(50) NOT NULL CHECK (metal IN ('Gold', 'Silver')),
  ounces FLOAT NOT NULL,
  amount FLOAT NOT NULL,
  type VARCHAR(50) NOT NULL CHECK (type IN ('fixed', 'percentage')),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

#### Model (TypeScript)
```typescript
// src/models/spotPrice.ts
import { pool } from '../config/database';

export interface SpotPriceProduct {
  id?: number;
  coinId: string;
  metal: 'Gold' | 'Silver';
  ounces: number;
  amount: number;
  type: 'fixed' | 'percentage';
  created_at?: Date;
  updated_at?: Date;
}

export const getAllProducts = async (type?: 'fixed' | 'percentage'): Promise<SpotPriceProduct[]> => {
  const query = type 
    ? 'SELECT * FROM spot_price_products WHERE type = $1'
    : 'SELECT * FROM spot_price_products';
  const values = type ? [type] : [];
  const result = await pool.query(query, values);
  return result.rows;
};

export const createProduct = async (product: Omit<SpotPriceProduct, 'id' | 'created_at' | 'updated_at'>): Promise<SpotPriceProduct> => {
  const query = `
    INSERT INTO spot_price_products (coin_id, metal, ounces, amount, type)
    VALUES ($1, $2, $3, $4, $5)
    RETURNING *
  `;
  const values = [product.coinId, product.metal, product.ounces, product.amount, product.type];
  const result = await pool.query(query, values);
  return result.rows[0];
};

export const deleteProduct = async (id: number): Promise<boolean> => {
  const result = await pool.query('DELETE FROM spot_price_products WHERE id = $1', [id]);
  return result.rowCount > 0;
};
```

#### Routes (TypeScript)
```typescript
// src/routes/spotPriceRoutes.ts
import express from 'express';
import { spotPriceService } from '../services/spotPriceService';
import { authenticateToken } from '../middleware/auth';

const router = express.Router();

router.get('/', authenticateToken, async (req, res) => {
  try {
    const { type } = req.query;
    const products = await spotPriceService.getAllProducts(type as 'fixed' | 'percentage' | undefined);
    res.json(products);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch products' });
  }
});

router.post('/', authenticateToken, async (req, res) => {
  try {
    const product = await spotPriceService.createProduct(req.body);
    res.json(product);
  } catch (error) {
    res.status(500).json({ error: 'Failed to create product' });
  }
});

router.delete('/:id', authenticateToken, async (req, res) => {
  try {
    await spotPriceService.deleteProduct(parseInt(req.params.id));
    res.status(204).send();
  } catch (error) {
    res.status(500).json({ error: 'Failed to delete product' });
  }
});

export default router;
```

## Price Calculation Logic

### Fixed Dollar Over Spot
```typescript
function calculateFixedDollarPrice(spotPrice: number, ounces: number, fixedAmount: number): number {
  return (spotPrice * ounces) + fixedAmount;
}
```

### Percentage Over Spot
```typescript
function calculatePercentagePrice(spotPrice: number, ounces: number, percentage: number): number {
  const basePrice = spotPrice * ounces;
  return basePrice + (basePrice * (percentage / 100));
}
```

## Example Usage

### Adding a New Product
```typescript
const newProduct = {
  coinId: "SAE025",
  metal: "Silver",
  ounces: 1,
  amount: 4.20,
  type: "fixed"
};

await spotPriceService.createProduct(newProduct);
```

### Calculating Price
```typescript
// For a 1oz Silver coin with $4.20 premium
const spotPrice = 25.00; // Current spot price
const ounces = 1;
const fixedAmount = 4.20;

const finalPrice = calculateFixedDollarPrice(spotPrice, ounces, fixedAmount);
// Result: $29.20
```

## Setup Instructions

1. Frontend Setup:
```bash
# Install dependencies
npm install @chakra-ui/react @emotion/react @emotion/styled framer-motion

# Add to your React app
```

2. Backend Setup:
```bash
# Install dependencies
npm install express pg typescript @types/express @types/pg

# Create database
createdb coingroup

# Run migrations
psql -d coingroup -f src/migrations/create_spot_price_table.sql
```

3. Environment Variables:
```env
# Frontend
REACT_APP_API_URL=http://localhost:3001

# Backend
DB_USER=coingroup
DB_HOST=localhost
DB_NAME=coingroup
DB_PASSWORD=your_password
DB_PORT=5432
```

## Security Considerations

1. Authentication:
- Implement token-based authentication
- Secure API endpoints
- Validate user permissions

2. Data Validation:
- Validate input types
- Sanitize user inputs
- Implement rate limiting

3. Error Handling:
- Proper error messages
- Logging
- Error recovery

## Testing

1. Frontend Tests:
```typescript
// Test price calculations
test('calculates fixed dollar price correctly', () => {
  expect(calculateFixedDollarPrice(25, 1, 4.20)).toBe(29.20);
});

// Test component rendering
test('renders product table correctly', () => {
  const products = [{ id: 1, coinId: 'SAE025', metal: 'Silver', ounces: 1, amount: 4.20, type: 'fixed' }];
  render(<SpotPriceCalculator products={products} />);
  expect(screen.getByText('SAE025')).toBeInTheDocument();
});
```

2. Backend Tests:
```typescript
// Test database operations
test('creates product successfully', async () => {
  const product = await createProduct({
    coinId: 'SAE025',
    metal: 'Silver',
    ounces: 1,
    amount: 4.20,
    type: 'fixed'
  });
  expect(product).toHaveProperty('id');
});
```

## Deployment

1. Frontend:
```bash
# Build for production
npm run build

# Deploy to hosting service
```

2. Backend:
```bash
# Build TypeScript
npm run build

# Start server
npm start
```

## Maintenance

1. Regular Updates:
- Update spot prices
- Maintain product database
- Monitor system performance

2. Backup:
- Regular database backups
- Version control
- Disaster recovery plan

## Troubleshooting

1. Common Issues:
- Database connection errors
- API authentication failures
- Price calculation discrepancies

2. Solutions:
- Check database credentials
- Verify token validity
- Validate calculation inputs
</rewritten_file> 